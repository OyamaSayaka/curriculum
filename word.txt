+■ IT
IT
→　Information Technology(インフォメーションテクノロジー)の略で直訳すると【情報技術】。
パソコン・スマートフォンといったコンピュータを使った情報技術の総称。情報を「手に入れる」「保存する」「伝える」技術。


ICT
→　Information and Communication Technology(インフォメーション・アンド・コミュニケーション・テクノロジー)の略で意味は【情報通信技術】SNS上のやり取りやメールでのコミュニケーションを手助けすることもICTの活用じれに該当する。


IoT
→　Internet of Thingの略で直訳すると(モノのインターネット)という意味。自動車や家電のような「モノ」自体をインターネットに繋げてより便利に活用するという試みを示す言葉。

■ OS
OS
→（Operating System）システム全体を管理し、さまざまなアプリケーションソフトを動かすための最も基本的なソフトウェアのこと。

Windows
→　マイクロソフト社が開発したOSのこと。

macOS (Mac OS X)
→　Appleが提供するMac用のOSのこと。


UNIX
→　UnixはOSの一種で、現存する中でもっとも古いOSのひとつ。古いだけあって、色々なOSの土台になったOS。
特徴としては安全性が高く、また余計な機能が少ないので軽いことがあげられる。また、安いのも特徴。



Linux
→　LinuxはOSの一種。安定的に動いて、費用がかからないというのが特徴。
UNIXとの大きな違いは、Linuxはオープンソースソフトウェアとして広く公開・配布されており、
GPLというライセンス体系に基づいて誰でも自由に入手・改変・再配布が可能な点。
UNIXは商用化によってライセンス管理が必要たが、
Linuxはフリー、つまり誰でも無料で使用することができる。


■ 言語・環境
マークアップ／フロントエンド
→　マークアップとは、文書構造（テキスト）や視覚表現（装飾）などの情報を、コンピューターが正しく認識できるように、
タイトルや見出しなどの各構成要素に「タグ」と呼ばれる識別のための目印を使い、意味付けを行っていくことを意味する。

→　フロントエンドとは、Web 系サービスにおいては、HTMLやCSS、JavaScript、画像ファイルなどを組み合わせてWebページを記述することです。


HTML
→　HTMLとは、ハイパーテキスト・マークアップ・ランゲージ（Hyper Text Markup Language）の略。
コンピュータが理解できる、マークアップをするための言葉。
Web制作では、ホームページ上に表示をしたい文章や写真などの情報に対し、HTMLという言葉で、コンピュータに文章構成を指示することから始まる。


CSS
→　CSSとは「Cascading Style Sheets」 の頭文字をとったものであり、スタイルシートとも呼ばれる。
CSS言語は、HTMLで作られた文書構造にデザインを加えて見栄えを整える役割を担う。


JavaScript
→　JavaScript はウェブページにて複雑な機能をできるようにするプログラミング言語。
ウェブページが読み込まれるたびに、静的な情報を表示する以上のことをする。

jQuery
→　jQueryとは、JavaScriptでできることを、より簡単な記法で実現できように設計されたJavaScriptライブラリ。2006年にリリースされ、JavaScriptライブラリのデファクトスタンダードであると言われている。


Java SE
→　Java Platform, Standard Editionの略称。
Java SEとは、Javaアプリケーションをデスクトップとサーバで開発や展開するといった、一般的な規模が特徴の素材。

サーバーサイド
→　サーバサイドはWebサーバ上で動作するプログラム。
サーバサイドはクライアント側で持っていない情報を参照する場合にプログラムを実行する。
その結果、クライアントの環境に依存せずに開発・管理がしやすいのと、html・画像・音楽・映像ファイルをサーバ側のデータベースで一元管理可能な事に利点がある。
代表的なプログラミング言語は、Java・PHP・Ruby・Python。


.NET（C#, VB）
→　.NET（ドットネット）とは、主にMicrosoft .NET Framework（マイクロソフト ドットネット フレームワーク）というアプリケーション、または開発環境を指す単語。
WindowsのシステムやWebサービスなどの開発に利用され、Windows7以降のOSでは、デフォルトで搭載されるようになっている。



Java
→　Java → Javaとはプログラミング言語の1つ。
世界的に見ても使用されている言語、習得したい言語として1位を記録する言語。
その理由としてJavaは多くの現場で使われていること、汎用的でOSに依存しない、などがあげられる。



Java SE
→　Java SE → JavaSE（Java Standard Edition）を一言で言うと「Javaの基本機能をまとめたもの」。
具体的にはJava言語でプログラミングを行う際に最低限必要な機能をまとめたもの。
アプリケーションを開発する場合は後述するJDKをインストールしておく必要がある。


Java EE（Jakarta EE）
→　Java EEの正式名称は「Java Platform, Enterprise Edition」で、企業向けのWebアプリケーション開発用の機能をセットにしたもの。
「Java EE」は、2018年2月に「Jakarta EE」へ名称が変更になった。


Perl
→　Perl（パル）はプログラミング言語の一種で、1987年にアメリカ人ラリー・ウォールによって開発された。
プログラミング言語の歴史でいうと30年以上で、歴史が長いため幅広い層に名前が浸透している。
誰でも利用できる言語で、UNIXやWindowsなどの環境下でも動作可能。
C言語やシェルスクリプトなどの他言語の良い部分を取り入れて開発している。
Web開発に用いられることが多い言語だが、現在ではPerlの他にもWeb開発に使われるメジャーな言語が増えている為、最近ではその名前は少し影を潜めている。
高い後方互換生、テキスト処理に優れている、可読性が高い、コンパイルが不要、CPANモジュールが豊富が特徴。


PHP
→　PHPの正式名称は「PHP: Hypertext Preprocessor」で、動的なコンテンツの作成に向いているプログラミング言語。
動的なコンテンツとは、同じURLであっても閲覧者の属性や時間帯などによって、表示される内容が変わってくるコンテンツを指す。
例えば、動的コンテンツの代表であるブログにも、多くの場合PHPが使用されている。
PHPを使いこなせれば、お問い合わせフォームやECサイトの開発など、さまざまなことができるようになる。


Ruby
→　Ruby（ルビー）とは、1995年に一般公開されたオブジェクト指向スクリプト言語。
Rubyはフリーソフトウェアなので、無料で使えることはもちろん、複製・変更、および再配布も可能となっている。
Rubyのコードはシンプルに書きやすく読みやすいので、知識の浅いプログラマーやプログラミング未経験者にもおすすめのプログラミング言語のひとつ。



■ サーバーソフト
Apache
→　Apacheは、無償で利用できるオープンソースのWebサーバーソフトであり、
Q-SuccessによるWebサーバーの世界シェアで、Apacheは、2020年8月時点で36.7%とトップを保っている。


nginx
→　Nginx（「エンジンエックス」のように発音）はオープンソースのWebサーバー。
Webサーバーとして成功して以来、リバースプロキシ、HTTPキャッシュ、ロードバランサーとしても使用されている。



IIS
→　IIS（Microsoft Internet Information Services）とは、Microsoftが提供しているWebサーバーサービス。
メリットとして、PCと同じWindows OSで動き、操作は慣れている、視覚的に操作可能(コマンドを覚える必要がない)
日本語の公式マニュアルが多い、セキュリティの設定がわかりやすい、豊富な機能、拡張機能が充実している、
開発環境が揃っている、があげられる。


■ SQL
SQL
→　SQLはプログラミン言語とは違い、データベースに対してしか命令することができない。また命令の方法もとてもシンプル。
基本的にSQLでは、一文ごとに結果を求める。「データベースに対して、こんなことがしたい」という一行程度の文をコマンドへ打ち込むと、命令が実行されるという方式。これを対話型と呼ぶ。



DB2
→　DB2とは、IBM社が提供しているリレーショナルデータベース管理システム（RDBMS）の製品群の総称である。
DB2は「DB2ユニバーサルデータベース」（DB2 UDB）と呼ばれるRDBMSを中核とする、管理ツールや開発ツールなどを含めた一連の製品群となっている。
DBが提供された当初は、「S/390」などのメインフレームを対応プラットフォームとしていたが、後にUnixやLinux、Windowsなどの幅広いプラットフォームに対応するようになっている。
また、DB2のデータベース言語としてはSQLが採用されており、ODBC（Open Database Connectivity）やJDBC（Java Database Connectivity）などのようなインタフェースの仕様を用いたアプリケーションからアクセスすることが可能となっている。


MySQL
→　MySQLは、Oracleが開発してサポートするオープンソースのSQLリレーショナルデータベース管理システム。
MySQLの特徴として、
・Webサイトの急増に伴うCMSの発展
・オープンソース(GPL)で基本的に無料
・Linux、Windows、Mac OS Xなど複数のOSで利用可
・巨大サイトの利用に耐える頑丈さ
・操作方法はシンプル(CMSでは初期設定すれば、通常利用では操作がほぼ不要)
・巨大企業オラクルが開発(サン・マイクロシステムズより買収)
・便利な管理ツールが充実(phpMyAdmin、MySQL Workbenchなど)
上記があげられる。
このように利用時には多くのメリットがあるため、MySQLは世界中で利用されている。


Maria DB
→　MariaDBはMySQLから派生したRDBMS（リレーショナルデータベース管理システム）。
非常にメジャーなRDBMSとしての地位を築いているMySQLの派生版でること、無料で使用できるということで注目を集めた。
SQL言語を用いて紹介・操作などの指示を行い、データベースの整合性を保つ仕組みを持っているデータベース。
MｙSQLから派生したというMariaDBだが、開発者はどちらも「Michael “Monty” Widenius」氏であり、同一人物。
開発方針の違いなどが理由でMySQLから離れたWidenius氏が、新しく会社を立ち上げてMySQLのコアメンバーたちと開発をスタートしたのが「MariaDB」になる。



Oracle 
→　Oracle Databaseは、1979年に世界初のRDBMSとしてリリースされ、代表的なRDBMSとされている。
・高い堅牢性を持つ
・行レベルでの排他制御「行レベル・ロック」を行うことで、同時に多くのユーザーが利用できる
・検索時点のデータを読み取ることが保証される「読み取り一貫性」
・パフォーマンスの向上、機能拡張などビジネスニーズを満たす機能
などの特徴が挙げられる。



PostgreSQL
→　PostgreSQLとは、リレーショナルデータベース（RDB）の作成や操作、管理ができるオープンソースのデータベース管理システム（DBMS）の一つ。
MySQLと人気を二分するオープンソースRDBMSで、Linuxなど主要なUNIX系OSとWindowsに対応し、機能の豊富さや拡張性の高さに定評がある。


SQLite
→ SQLiteを一言でいうと、オープンソースで軽量のRDBMS（データベース管理システム）。
SQLiteは軽量・コンパクトなオープンソースのデータベース。設定不要・マルチプラットフォーム・データ型の指定が緩い、といった特徴やメリットを持っている。
性能に関しても、中小規模開発であれば、その他のデータベースと同等の処理性能を持っている。



SQL Server
→　SQL Serverの正式名称は「Microsoft SQL Server」。
名前が示す通り、Microsoft社が開発したRDBMS（データベース管理システム）。「MS SQL」などと呼ばれたりする。
SQL Serverは、企業で利用されることが多いデータベース管理システムの１つです。
他のデータベースと比べて直感的に操作できるように作られている。
独自拡張したT-SQLを使えることや、多様なエディションが用意されていることが特徴である。



CRUD
→　CRUDとは、プログラミングでアプリを作る際の「4大機能」の頭文字を取ったもの。
C：登録機能（Create）
R：読出機能（Read）
U：変更機能（Update）
D：削除機能（Delete）
Create、Read、Update、Deleteの頭文字を取って「CRUD」という。



トランザクション
→　一方IT分野における「トランザクション」は、主にソフトウェア処理方式の一種のことを指す。
複数の処理が必要だけれどひとかたまりであるべき処理のことを「トランザクション」という。


コミット
→　IT用語としても「コミット」は使われていて、その場合の意味は「確定させる」や「反映させる」をいう。
複数の処理を一つの処理でまとめて行うトランザクション処理で、結果が確定することを「コミット」と言う。
またファイルの変更履歴の保存や管理を行うバージョン管理システムで、その結果を反映させることも「コミット」と呼びぶ



ロールバック
→　トランザクションが失敗して，トランザクションで更新するはずの資源の状態を，トランザクション開始直前の状態に戻すことを，トランザクションのロールバックといいます。トランザクションをコミットできなかった場合や，処理の不整合を検出した場合には，これまでの処理をロールバックで取り消して，データの整合性を保ちます


排他制御（排他ロック）
→　排他制御とは、あるトランザクションが実行中のときに、そのトランザクションが対象としているデータをロックし、
他のトランザクションのアクセスを禁止することによって、データの整合性を確保しようとする仕組み。
トランザクションが完了すれば、ロックは解除され、他のトランザクションはデータにアクセスできるようになる。


楽観ロック
→　楽観ロックとは、めったなことでは他者との同時更新は起きないであろう、という楽観的な前提の排他制御。
データそのものに対してロックは行わずに、更新対象のデータがデータ取得時と同じ状態であることを確認してから更新することで、データの整合性を保証する方式。
楽観ロックを使用する場合は、更新対象のデータがデータ取得時と同じ状態であることを判断するために、Versionを管理するためのカラム(Versionカラム)を用意する。
更新時の条件として、データ取得時のVersionとデータ更新時のVersionを同じとすることで、データの整合性を保証することができる。


悲観ロック
→　他者が同じデータに頻繁に変更を加えるであろう、という悲観的な前提の排他制御。
更新対象のデータを取得する際にロックをかけることで、他のトランザクションから更新されないようにする方式。
悲観ロックを使用する場合は、トランザクション開始直後に更新対象となるレコードのロックを取得する。
ロックされたレコードは、トランザクションが、コミットまたはロールバックされるまで、他のトランザクションから更新されないため、データの整合性を保証することができる。



実行計画
→　より短い時間でSQLを実行できる方法を計算し、具体的な方法を「計画」としてまとめたもの。
例としてSELECT文を実行するのに、カラムの値がヒットするまでフルスキャンするのか、対応づけられたINDEXを参照するのか、具体的な方法を示したもの。



チューニング
→　システムやプログラムなどを改良し、パフォーマンスの向上を図ること。
情報システムやコンピュータ、ソフトウェアなどの設定や構成を調整し、目標の状態に近づけたり、性能を最大限引き出したりする作業を指すことが多い。


パフォーマンス
→　性能のこと。
コンピュータなどの機器やソフトウェア、システムなどの処理性能や実行速度、通信回線・ネットワークなどの伝送速度・容量などのこと。



スロークエリ
→　処理速度が遅いSQLのこと。
事業や実行する処理にもよるが、2秒以上かかっていたら大体遅い部類と言って良い。



クエリログ
→　クライアントからの MySQL Server への接続・接続解除の情報、およびクライアントから実行された全ての SQL クエリを出力してくれるログのこと。
SQL 実行エラーが発生した際に、どのような SQL が実行されたのかを正確に把握するのにつかわれる。



IDE（統合開発環境）
→　開発に必要なものをいろいろまとめて、使いやすくしたソフトのこと。
Java開発キット（JDK）とも連携して、いろいろ面倒な作業を自動化してくれる。
絵を描くイメージで例えるなら、
便利なツールを集めた「お絵かきセット」のようなもの。
Javaの場合、無料、有料の統合開発環境がいくつも出ている。


Eclipse
→　IBM社が、自社のJava用製品をコミュニティに寄贈。オープンソース化して、誰でも無料で手に入れられ、開発できるようにした。
特徴として
・独自仕様のツールキットの使用により高速に動作
・いろいろな機能を追加できる強力なプラグイン機能
・強力なコード追跡、補完機能など
Javaの開発環境に留まらず、プラグイン機能の利用により、C++、PHPなど多様な開発環境に対応できる。
何でもできる反面、基本セットの機能が限定されており、自分でプラグインを追加・調整しなければならない場面が多かった。
Web開発などの機能も自分で追加しなければならなかったため、やや難しい面があった。
現在は、基本セットに必要機能が取り込まれており、解消されている。


NetBeans
→　Javaの開発元でもあるサン・マイクロシステムズが、自社の製品をコミュニティに寄贈。オープンソース化して、誰でも無料で手に入れられ、開発できるようにした。
特徴として
・最初からいろいろ入っているオールインワン仕様
・強力なGUIアプリケーション作成機能
・Javaの最新版への対応が早い
開発当初は、動作が遅い、機能がしょぼいなど、Eclipseの後塵を拝していたが、現在は動作も速く、強力なGUI作成機能など、肩を並べる存在になっている。
最初からいろいろな機能が含まれるオールインワンの仕様になっており、自分で追加しなければならいないものはほとんどない。


SpringToolSuite
→　Spring Tool Suite(STS)は、Springベースのアプリケーション開発を行うために提供される開発ツール。使い勝手はEclipseと同様。



DBツール
→　データベース・ツールとは、データベース管理タスクに使用できるツール、ユーティリティおよび補助ツールの総称です。
類似するタスクを実行できるデータベース・ツールもあるが、1つのデータベース・ツールですべてのデータベース管理タスクを実行することはできない。


A5:SQL Mk-2
→　 A5:SQL Mk-2は複雑化するデータベース開発を支援するために開発されたフリーのSQLクライアント。
 高機能かつ軽量で、使い方が分かりやすいことを目標に開発されている。
 SQLを実行したり、テーブルを編集するほかに、SQLの実行計画を取得したり、ER図を作成したりすることが出来る。


pgAdmin
→　pgAdminとは、PostgreSQLの管理ツールの一つで、ネットワークを通じて遠隔のデータベースサーバをグラフィカルな表示・操作体系（GUI）で管理することができるもの。オープンソースとして公開されている。


DBeaver
→　DBeaverはOracle SQL、SQL Server、PostgreSQL、MySQL、MariaDB、SQLiteなどほぼ全てのDBに対応したSQLクライアントツール。
またGUI(Graphical User Interface)クライアントならではの機能が豊富に搭載されているため、学習用クライアントとしてだけでなく現場での実践においても非常に有用なツールとなっている。


MySQL Workbench
→　MySQL Workbenchとは、MySQL公式で配布されているデータベース管理ツール。その特徴として、データーベースの管理から設計・開発までフルで行えること、GUIベースで操作できることが挙げられる。


Sequel Pro
→　MysqlのDBを確認できるMac用のGUIアプリケーション。Mysqlクライアントの中でどれくらいのシェア率があるかまではわからないが、必要な機能は一通り揃っている。
なお現在の正式版バージョンは1.1.2であり、このバージョンは最新OSなどで頻繁にクラッシュする報告が多数あり、アップデートも2016年から止まっている。
正式版ではなくテストビルド版を使うことでクラッシュを回避することができ、最新のテストビルド版のアップデートは7ヶ月前となっているためクラッシュに悩む人は移行するのもありだという意見もある。


TeamSQL
→　TeamSQLは、完全無料を謳っているDBをGUIで管理する為のソフトウェアのひとつです。
同カテゴリのソフトウェアとしては他に、phpMyAdminやMySQL Workbench、HeidiSQLなどがある。


■ 肩書
PM
→　プロジェクトマネージャーとは、プロジェクトの運営、品質、納期等に責任を持ち、プロジェクトを円滑に推進させる役割を果たすプロジェクト管理者のこと。
具体的な業務内容には、プロジェクトメンバーの選定、顧客折衝、案件受注、要件定義、品質管理、納期・進捗管理、コスト管理等がある。
プロジェクトマネージャーになる為には、システム開発に関わる一連の業務に精通していなければならない。よってプロジェクトメンバー（システムエンジニア）として開発や設計業務を経験した後に、
プロジェクトリーダー、そしてプロジェクトマネージャーへとキャリアアップするケースが一般的です。


PL
→　IT業界におけるPL（プロジェクトリーダー）とは、システムの構築・導入プロジェクトにおいて、プロジェクトチームを管理・統括する業務。
PMとよく似ていますが、PMとPLの違いを簡単に挙げると、
PMの役割は、１つのプロジェクトを管理・統括する総責任者として、プロジェクト全体の工数、進捗、品質などを管理すること
PLの役割は、プロジェクトにおけるサブチームのリーダーとして、数名のメンバーの工数、進捗、品質などを管理すること
ということができる。
基本的にPMは１つのプロジェクトに1人ですが、PMの下に配置されるPLは複数名存在します。
PLになる為には、システム開発に関わる一連の業務に精通していなければならない。
よってプロジェクトメンバー（システムエンジニア）として開発や設計業務を経験した後に、プロジェクトリーダーに、
そしてその後はプロジェクトマネージャーにキャリアアップするケースが一般的である。


PG（PE）
→　プログラマー（PG）とは、SEの作った仕様書に沿って、実際にコンピュータのプログラミングを行う職種。
また、PGは、コーディングしたシステムが予定通りに動くかどうかのテスト作業も行う。
このテスト作業は、SEと共に行うケースが多いです。


SE
→　システムエンジニア（SE）とは、システム制作を行う職業。
仕事の内容は、要件定義、仕様書の作成、コーディング、テスト作業といった、システム開発案件全体に関わっていく。
しかし、これは、あくまでも一般的なSEの職務内容で。作業内容の中でも、コーディングはプログラマー（PG）が担当するケースもある。
また、SEやPGの他にも、コーダーやWebデザイナーといった職業も存在する。
会社によっては、このような職種の人たちがチームとなって、ソフトウェア開発に関わる場合もあります。



デザイナー
→　デザイナーとは文字通り、製品やポスター、雑誌書籍の表紙やレイアウトなど、さまざまなもののデザインを手がける仕事。


エンジニア
→エンジニアとは、「工学（エンジニアリング）に関する専門的な知識やスキルを持った人材」を指す言葉で、日本では「技術者」とも呼ばれる。
IT技術が進んだ現代では、インターネット関係のITの専門知識やスキルを備えた「ITエンジニア」が活躍している。


フロントエンド・エンジニア
→　フロントエンドとはクライアント側、Webブラウザ側で作動する部分のことを指す。
フロントエンドエンジニアは、Webアプリケーションなどでユーザーが画面越しに触れる部分、つまりフロントエンドの設計や構築を行う職種。
フロントエンドエンジニアはデザイナーが設計したデザインを元にHTML、CSS、JavaScriptを駆使して、ブラウザに表示できるようにコーディングを実施。
現場によってはデザインやディレクションに関わることもありますので、幅広い活躍が期待されるポジションといえる。


サーバーサイド・エンジニア
→　サーバーサイドという名前の通り、サーバー側で行う処理に対して必要なプログラムの開発や、サーバーで扱うデータの管理を行うエンジニアのことをいう。
システムの裏側の処理を担当するということで、バックエンドエンジニアと表現されることもありますが、同じ意味だと捉えて良い。
もう少し簡単に言うと、普段使っているインターネットやアプリに置いて、主にサーバーで行う処理(目に見えない処理)の開発や保守を行うエンジニアをサーバーサイドエンジニアと言う。
サーバーサイドエンジニアに対し、Webページの設計や画面上の動きなど、ユーザーの目に触れる部分のプログラムを行うエンジニアのことをフロントエンドエンジニアと言う。



バックエンド・エンジニア
→　バックエンドエンジニアとは、サーバサイド全般を取り扱うエンジニアのことで、「サーバ構築」と「サーバサイドプログラム開発」が主な仕事です。
バックエンドエンジニアが担当する業務の範囲は広いので、Webサービスの開発全般の知識を持っておかなければならない。




■ UI（ユーザーインターフェース）

UI
→　UI(ユーザーインターフェース)とは、人とモノの接点のこと、を指す。
これだけだと結局よくわからないので具体例をあげれば、
・スマートフォンで見ているWebサイトに表示されている情報(デザインやフォントなど)
・クルマの運転席についているハンドルやメーターなど
・家電製品についているスイッチなど
上記はすべてUIの一種と言える。一般に「UIをデザインする」といった表現をすることが多いが、このときは多くの場合「見た目を美しくする」という意味合いで使われている場合がほとんどである。



CUI
→　コマンドラインのユーザーインターフェース。
つまり、マウスとかを使わないで、コマンドをキーボードから入力して操作する方式。
コマンドを知らないと使用できない。
プログラムによるOSの自動化処理など、人が画面操作しない場合に利用されることが多い。


GUI
→　GUI（Graphical User Interface）
グラフィカルなユーザーインターフェース。
つまり、マウスなどで画面を使って入力・操作をする方式のこと。
直感的に操作することができる。現在のアプリケーションはほとんどこの方式。


■ ファイル／ディレクトリ
ファイル
→　ファイルとは、コンピュータにおけるデータの管理単位の一つで、ストレージ装置（外部記憶装置）などにデータを記録する際に利用者やOSから見て最小の記録単位となるデータのまとまり。


拡張子
→　拡張子とは、それぞれのファイルの種類を区別させるためにある。ファイル名の後にピリオド、その後に3文字程度の英数文字列の構成になっている。
拡張子により割り当てられるアプリケーションが異なる。間違った拡張子ではファイルを開くことができなくなる場合があるので注意。



ディレクトリ
→　ITの世界におけるディレクトリは、パソコン上に保存されているデータを分類したり整理したりするための容れ物という意味を持つ。
テキスト・音声・動画など、さまざまな種類のデータをディレクトリを用いることで整理整頓できる。
また、ディレクトリにディレクトリを格納することもできる。
そのため、きちんと整理されたディレクトリは、複数に枝分かれした木のような構造を成しているのが特徴的。


ルート・ディレクトリ
→　ルートディレクトリは、階層構造になっているディレクトリにおいて最上位に位置するディレクトリを指す。
すべてのファイル・ディレクトリの根幹にあたり、ルートディレクトリより上のディレクトリは存在しない。
Windowsにおいては、Cドライブ（C:\）やDドライブ（D:\）がルートディレクトリにあたる。
基本的には、ルートディレクトリはパソコンに1つしか存在しません。
しかし、Windowsは1つのハードディスクをパーティションと呼ばれる仕切りで複数に区画して利用するため、ルートディレクトリが複数存在することがある。
一方でmacOSやlinuxは、基本的にハードディスクをパーティションで区切らず、1つのルートディレクトリ（/）の下で管理をする。


カレント・ディレクトリ
→　カレントディレクトリは、現在作業しているディレクトリを指す。
Windowsを例に挙げると、「windowsキー+E」でエクスプローラーを開き、「C:\」「Program Files」の順でクリックした場合、カレントディレクトリは「Program Files」になる。
また、linux・macOSなどUNIX系OSのコマンド「pwd」は、カレントディレクトリを絶対パスで表示してくれる。


パス
→　パス［path］とは処理の流れに対し、実際に実行されるプログラムのこと。あるいは任意のファイルやディレクトリまでの道筋［パス］のこと。
操作したいファイルを正式に指定する場合、必要に応じて『A:WINDOWSTMPSAMPLE.DAT』といったように表す｡


絶対パス
→　URLでページを指定して、目的地（情報）がどこにあるのかを確実に伝えること。
たとえば実際に道案内をするときに、目的地の住所（URL）を教えるのが絶対パスの伝え方。


相対パス
→　今いる場所（階層）を基準にして、目的地（情報）がどこにあるのかを伝える。
ある地点から道を曲がって道路沿いのつきあたりを右…というように、今いる場所から目的地までの経路を案内するのが相対パスの伝え方。
相対パスは自分がいる場所を起点にした位置、絶対パスはトップからの位置と理解する。


■ ネットワーク
LAN
→　LAN とは、ケーブルや無線などを使って、同じ建物の中にあるコンピュータや通信機器、プリンタなどを接続し、データをやり取りするネットワーク。Local Area Network の略称で、狭い範囲内でのコンピューターネットワークのこと。「構内通信網」と訳されることもある（IT 用語辞典）


WAN
→　LAN に対して、LAN で接続しきれない遠隔地のコンピューター同士どうしを接続するネットワーク形態を WAN (Wide Area Network) と言う。
WAN では、距離の離れているコンピューターや LAN 同士どうしを、通信回線などを使って接続する。
インターネットは WAN の形態で接続されています。身近な WAN です。世界中のコンピューター同士を相互に接続して構成されています。
WAN には、支店・支社を持つ企業などが情報共有のために構築することが多く、限定されたユーザーだけが利用できる、閉じた （クローズド） のネットワークと、インターネットのように世界中のだれでも利用できるオープンなネットワークとがある。


クライアン
→　クライアントとはサービスを利用するコンピュータ。

サーバー
→　サーバはサービスを提供するコンピュータ。
サーバはとても偉い立場にあって、サーバが動いていない限り、何もできない。
学校に置き換えると、サーバは校長先生、クライアントは先生・生徒になる。



■ 各種プロトコル
HTTP
→　HTTPは、 「Hyper Text Transfer Protocol」の略。
今やインターネットの代名詞となったWWW(World Wide Web)上でWebサーバとクライアントが、 HTML(Hyper Text Markup Language = Webページを記述するための言語)で書かれた文書などの情報をやりとりする時に使われる通信手順(プロトコル)を意味する。



FTP
→　FTP（File Transfer Protocol）とは、一言で言うと、「ファイルを送受信する時に使う決まりごと（通信プロトコル）」。
通信プロトコルには複数の種類のものがありますが、その内のひとつがFTP。
FTPを使用してできることは、主に下に記した3つ。
① サーバーにアップされたファイルの一覧を見る
② ファイルをサーバーにアップロード、またダウンロードやバックアップを行う
③ FTPサーバーに接続し、データの操作を行う



HTTPS
→　HTTPSには文字列の最後に「S」が付いています。この最後の「S」は「Secure（セキュア）」の「S」です。「Secure」という単語を辞書で調べてみると「セキュリティがしっかりしている」といった意味で使われている単語。
HTTPSもHTTPと同じプロトコルの一つですが、HTTPSではSSL（Secure Socket Layer）というプロトコルが使用されている。
HTTPとHTTPSの主な違いは通信内容が暗号化されていないか、されているかの違いです。HTTPSに対応しているサーバでは、ホームページのデータをやり取りする際に暗号化されて通信するようになる。
通信内容を暗号化することで、安全にWebの情報をやり取りすることができます。


SSL
→　SSL（Secure Sockets Layer）は、インターネット上でデータを暗号化して送受信する仕組み（プロトコル）のこと。
個人情報やクレジットカード情報などの重要なデータを暗号化して、サーバ～PC間での通信を安全に行なうことができる。
ウェブサイトから情報を送信する際に、送信する情報を暗号化する為に利用する。
サイトの管理者は送信される情報を悪意を持った第三者から守ると同時に、送信される情報が改ざんをされていないことを証明することができる。つまり、ウェブサイトを運用する上でSSLは切っても切れない関係。


SSH
→　SSHとはSecure Shellと言う言葉から名付けられた、安全にリモート接続を行うためのプロトコル。
他のリモート接続方法として「Telnet」などがあるが、これらでリモート接続を行う場合は、通信内容はそのままネットワークに流れることになってしまう。
SSHを用いれば、パスワードを含む全ての通信内容は暗号化され、通信経路上における盗聴やデータの改ざんを防ぐことができる。
また、認証に鍵データを利用することで、パスワードの漏えいによるなりすましも防ぐことができます



ポート、ポート番号
→　IPアドレスを建物の住所に例えるなら、ポート番号は「部屋の番号は何号室か？」という例えになる。
コンピュータネットワークにおいて、プロトコル、IPアドレスとポート番号はまとめると、「どのような方法」で「どこ」の「何号室」に通信をとるのか？という形にいいかえることが出来る。
通信において重要なポート番号だがポートを開くということは、特定の部屋の扉をあけはなっている状態に等しいので、サービスを提供するサーバでもないかぎり、基本的に不必要なポートは開かないように設定しておかなければならない。



HTTP、FTP、SSHの各ポート番号
→　メール関連
SMTP
ポート番号：25（TCP）
POP3
ポート番号：110（TCP）
IMAP2、IMAP4
ポート番号：143（TCP）
IMAP3
ポート番号：220（TCP）
Message Submission
ポート番号：587（TCP）
OP25B（Outbound Port25 Blocking）を導入している場合など。
SMTP over SSL（SMTPS）
ポート番号：465（TCP）
IMAP over SSL（IMAP4S）
ポート番号：993（TCP）
POP over SSL（POP3S）
ポート番号：995（TCP）
ウェブ関連
HTTP
ポート番号：80（TCP）
HTTPS
ポート番号：443（TCP）
FTP、SSH
FTP
ポート番号：21（TCP）
FTPS も 21
SSH
ポート番号：22（TCP）
SFTP も 22
TELNET
ポート番号：23（TCP）
サーバ関連
DNS
ポート番号：53（UDP）
NTP
ポート番号：123（UDP）


ファイアウォール
→　ファイアウォール(Firewall)とは、企業などの内部ネットワークをインターネットを通して侵入してくる不正なアクセスから守るための“防火壁”。
ファイアウォールは、送られてくるパケット（データのかたまり）の情報から接続を許可するか判断し、不正なアクセスであると判断した際には、管理者に通報できるよう設計されている。
またより高いセキュリティを保てるよう々な付加機能を持っているものが多く、様々なネットワークに柔軟に対応できるようになっている。


TCP
→　TCP (Transmission Control Protocol) は、IPと同様にインターネットにおいて標準的に利用されているプロトコル。
TCPは、IPの上位プロトコルでトランスポート層で動作するプロトコル。ネットワーク層のIPとセッション層以上のプロトコル（例：HTTP、FTP、Telnet) の橋渡しをする形で動作している。
TCPは、信頼性の高い通信を実現するために使用されるプロトコルであるのに対して、同じく、IPの上位プロトコルのUDPは信頼性が高くはないが、高速性やリアルタイム性を求める通信に使用されるプロトコル。
このようにどちらかが優れているということではなく、通信特性によりTCPまたはUDPを使い分けされます。
※　TCPは、コネクション型通信（通信開始前に相手との間で仮想的な通信路を確保する）を行いう。
※　UDPは、コネクションレス型通信（通信開始前に相手との間で、事前のやり取りなし）を行いう。




■ IPアドレス
IPアドレス
→　IPアドレスは、スマホやPCなど、ネットワーク上の機器に割り当てられるインターネット上の住所のような存在。
インターネットでページを閲覧したり、メールの送受信を行うには、データの送信元や送信先を識別しなくてはいけないが、この識別に使われる番号がIPアドレスだ。ネットワーク上でデータを送受信する際、通信相手を指定するために使われている。


グローバルIPアドレス
→　その名のとおり、全世界で通用するアドレスで、世界中どこからでもデータ送受信の際に送り間違えのないよう、世界にただひとつ、インターネットに接続する際に割り振られるIPアドレス。
グローバルIPアドレスは特定の国や地域に属さない「ICANN」という組織によって世界的に管理 されており、
ICANNから日本の管理組織であるJPNICに割り振られ、そこからインターネット・サービス・プロバイダ（以下ISP）を経由して利用ユーザーへと割り振られている。
そのため、利用ユーザーがISPと契約すると、ISPに割り当てられたIPアドレスのなかからPCやルーターが接続した際に通信が重複しないよう割り振られるため、
同じグローバルIPアドレスが存在することはない。そのIPアドレスは、XXX.XXX.XXX.XXXのように0〜255の数字4組で表記されるが、
数字の組み合わせは有限であり、問題が起きている。


プライベートIPアドレス
→　自宅や会社など特定のネットワークの範囲内で用いられるIPアドレスのことで、ローカルIPアドレスとも呼ばれる。
グローバルIPアドレスとは違い、そのネットワーク内で識別できれば良いので、ほかのネットワークでは同じ番号が使われている可能性がある。
ちなみに、このプライベートIPアドレスとグローバルIPアドレスはそれぞれ番号の割り当て範囲が決まっており、詳しい人が番号を見れば、どちらのIPアドレスか判別することができる。


■ ドメイン
ドメイン
→　ドメインとは、「インターネット上の住所表示」として例えられます。電子メールを送ったり、ウェブサイトを閲覧する際に相手を特定するために必要になる。
例えば、URLが「https://www.onamae.com/」であればドメイン名は「onamae.com」です。


DNS
→　DNSとは、Domain Name Systemの略称で、ドメインとIPアドレスを対応付けて管理するシステムのことを言う。
ドメインを管理／運用する上で欠かせない役割を担っているのがDNS（ドメインネームシステム）。これは、数字を組み合わせたコンピュータの住所である「IPアドレス」を、人が理解しやすい住所へと変換するための仕組み。
「192.168.1.1」などで示されるIPアドレスを、「http://www.○○○.com」のような分かりやすい文字列に置き換えてくれるのです。
このDNSの機能を司るサーバーを「DNSサーバー」と呼びます。DNSサーバーが仲介役になり、特定のコンピュータと通信したり、Webサイトを表示したりできるようにしている。
DNSサーバーには、IPアドレスと紐づくドメインは何かといった情報が蓄積されています。とはいえ、DNSサーバーがダウンしたらIPアドレスをドメインに置き換えられなくなって、Webサイトもメールも使えなくなってしまう。
そこでDNSサーバーは、通常情報を重複して保持する2台以上のサーバー群で構成されています。1台のDNSサーバーがダウンしても他のDNSサーバーがIPアドレスをドメインに置き換えてくれるので、アクセスが滞ることなく処理できるようになっている。



VPN
→　VPNとは「Virtual Private Network」の略式名称で「仮想専用回線」という意味を持つ。
VPN接続する拠点にVPNに対応したルーターを設置し相互接続する。こうすることで通信が暗号化され外部からは非常に読み取りが困難な通信網となります。
VPNを導入すると、端末（スマホ・PC）と、通信する先（LINEでもYoutubeでも、ウェブサイトでもすべて）の間に、VPNサーバーという場所を通るようになる。
ここをVPNサーバーによって、セキュリティに強い通信になる。
通信が保護され、他人から覗き見することができない通信に変化する仕組み。


ブリッジ
→　ブリッジ［bridge］とはネットワーク上で、ケーブルに流れるデータの中継機能を持った装置のこと。
リピータ、ルータ、ゲートウェイなどがある。LAN間を行き来するデータの宛先MACアドレスを見て、中継する／しないの判断をしている。3ポート以上のものをマルチポートブリッジ、レイヤ2スイッチ［L2SW］と呼んでいる。


プロキシサーバー
→　プロキシサーバーとは、インターネットへのアクセスを代理で行うサーバーのこと。
通常はパソコンやモバイル端末のブラウザを経由して直接Webサイトへアクセスし、サーバーがデータをブラウザに返すことで画面にWebサイトが表示される。


■ 電子メール
SMTP
→　SMTP（Simple Mail Transfer Protocol）とは、メールの送信に用いるプロトコルです。
SMTPは、以下2つの用途で利用される。
1. パソコンのメールソフトで作ったメールを自社のメールサーバーに送信する時
2. 自社のメールサーバーが相手先のメールサーバーへメールを配送する時


POP
→　POP（Post Office Protocol）は、メール受信に用いるプロトコル。
メールソフト上でPOPを設定した場合は、メールサーバーに届いたメールをメールソフトがパソコンにダウンロードするようになります。
また、メールソフト側の設定にもよるが、メールソフトがメールをダウンロードした後はメールサーバーのデータは削除される。
POPのメリットは、メールサーバーにデータを残さない設定なので、メールサーバーの容量削減になること。
また、メールデータは端末に残るので、過去に受信したメールはインターネットに接続していない状態でも閲覧できる。
デメリットは、POPは受信した端末にデータが保存される形式なので、複数台でメールを閲覧する場合には向かないこと。


IMAP
→　IMAP（Internet Message Access Protocol）は、メール受信に用いるプロトコル。
よくPOPと比較されるプロトコルでもあります。IMAPでは「143」番ポートを使用する。
IMAPを設定した場合、メールサーバーに届いたメールを「インターネット」を介してメールソフトが読みにいける。
POPでは端末にメールデータを自動的にダウンロードしていましたが、IMAPでは端末にデータは残さない。
スマートフォンとPC両方でメールをチェックしたいなど、複数端末で同じメールを読めるのはIMAPのメリットと言える。
また、新しいパソコンに買い替えた時なども、面倒なデータ移行なしでスムーズに切り替えができる。
IMAPのデメリットとしては、メールサーバーにデータが残り続けるため、サーバー側の容量次第では、すぐにメールボックスが満杯になってしまうこと。


■ セッションとクッキー
セッション
→　コンピュータネットワークでは、接続を確立してから切断するまでの一連の通信のこと。
HTTPのサイトでは、セッションにIDを振ることで同一のセッションを管理することができる。
また、一連のインタラクティブな操作(例えばログインしてからログアウトするまで)を指す場合もある。


クッキー
→　Cookie（クッキー）とは、ホームページを訪問したユーザーの情報を一時的の保存する仕組み、またはそのデータ。
ID、パスワード、メールアドレス、訪問回数などがユーザー情報として保存される。
これによって再訪問したときにユーザーを特定し、情報を入力する手間が省ける。
ショッピングサイトに訪問したとき、すでにログイン状態になっている、
以前カートに入れた商品がそのまま残っているのは、Cookie機能がはたらいているから。

キャッシュ
→　

■ DB（データベース）について
インデックス
→　データベースを使うと必要な情報を検索するのに非常に便利だが、膨大な量のデータを一度に処理しようとすると検索結果が出るまでの時間（性能）の低下を引き起こす。
そのためにDBMSは、インデックスという索引のようなものを使ってデータの検索を高速化する機能を持っている。
インデックスは索引のことで、どのデータがどこにあるかを示した一覧表。良く例えられるのが本の目次。
本の中の見たいページを探すときに、最初の1ページ目から1枚ずつめくって調べていくのでは無く、
目次から対象ページを見つける（絞り込む）ことで目的のページに効率よく辿り着くことができる。
インデックスものこれとおなじようなものなので、インデックスを使うことで素早く必要なデータにアクセスできることになる。



■ テストについて
フロー
→　コンピュータプログラムの制御パス中の変数の状態変化（定義・参照・消滅）に注目して、エラー検出を図る静的テスト技法をいう。
プログラムが処理の対象となるデータを扱う方法の1つに変数がある。変数は通常、プログラムの中で定義（宣言・代入）によって生成され、1回以上参照（使用）され、不要になれば消滅（解放・未定義）するというライフサイクルを示す。
このように変数の経過は“定義-参照-消滅”が標準のはずだが、プログラムを子細に見ていくと、定義-定義（2度も定義する必要があるのか）、
定義-消滅（定義が無駄ではないか）、消滅-消滅（2度も未定義にする必要があるのか）のような怪しい使い方が出てくる。
このようなエラーとなる可能性が高い不正なパターンをチェックする作業をデータフローテストという。


■ チケット管理ツール
タスク
→　タスク【task】とはコンピュータ内でOSが処理する仕事の単位のこと。
タスクの実行や制御、プログラムの読み込み、CPUやメモリ割り当てはタスク管理プログラムが行う。
1回に1つずつのタスクを処理する方式を『シングルタスク』といい、複数のタスクを同時に処理する方式を『マルチタスク』という。



■ バージョン管理
Git
→　「Git（ギット）」とは、Linuxカーネルの開発を支援する目的で開発されたバージョン管理システムの名前。
開発者はLinuxカーネルと同じLinus Torvalds。
Gitは現在、主にオープンソースソフトウェアの分野で主流のバージョン管理システムとなっている。



SVN
→　オープンソースの集中型バージョン管理システム。正式名称はApache Subversion。


デグレ
→　語の「デグレード(degrade)」を短縮した言い方。
本来の語訳は「品位を下げる」とか「退化する」。
これが転じて、ソフトウェアのバージョンアップに伴う品質低下のことを指します。

通常、バージョンアップしたら機能が向上したり品質が安定したりするものですが、
逆に品質が低下するってどういうことかというと例えば、
ある不具合を修正したら、今まで正常に動いてた箇所で不具合が発生したり古いプログラムのバージョンに戻ってしまって、修正したはずの不具合が再発したりする。



マージツール
→バージョン管理システムにおけるマージとは、バージョン管理されているファイル群に対して行われた変更を統合する操作のことである。
マージが必要とされる典型的なケースとしては、ひとつのファイルが、異なるコンピュータ上で、異なる利用者によって同時に変更された場合がある。
2つのブランチをマージすると、双方のチェンジセットを取り込んだファイル群ができあがる。
ファイルに対する変更の衝突がなければ、マージを自動的に実行することもできる。
衝突があった場合は、マージ結果のファイルの作成は人手で行う必要がある。
多くのバージョン管理システムにはマージ機能が搭載されている。